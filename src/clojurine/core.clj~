(ns clojurine.core
  (:gen-class))

(defn filter-non-letter [x]
  (filter #(Character/isLetter %) x))

(defn apply-str [l]
  (apply str l))

(defn mung [w]
  (apply-str (sort w)))

(defn mung-map [k]
  (assoc {} (mung k) k))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (def words (clojure.string/split-lines (slurp (first args))))
  (def mungm  (loop [mungm {}
                      keys (->> words
                                         (map filter-non-letter)
                                         (map apply-str)
                                         )]
                (if (empty? keys)
                  mungm
                  (recur (rest keys)
                              (assoc mungm (mung (first keys)) (first keys))))
              ))
  (println (filter #(= (mung "anigramer") (first  (first mungm)))))
  )

